<template>
    <lightning-card>
         <template if:true={PicklistValues.data}>
          <lightning-button label="Reset" variant="brand" onclick={refreshComponent}></lightning-button> 
          <br> 
          <lightning-button variant="brand" label="Export data" title="Export Data" onclick={exportContactData}></lightning-button>
         </br>
          <lightning-input type="text" label="Search" onchange={handleChange} ></lightning-input>
        <lightning-combobox
                            label="Stage Name"
                            value={value}
                            placeholder="-Select-"
                            options={PicklistValues.data.values}
                            onchange={handleChange} >
        </lightning-combobox>
        <br>
        <lightning-input type="date" name="startdate" label="start date"  onchange={handleChange} ></lightning-input>
        <lightning-input type="date" name="enddate" label="End date"   onchange={handleChange}></lightning-input>
        <lightning-datatable
        key-field="id"
        columns={columns}
        data={data}
        default-sort-direction={defaultSortDirection}
        sorted-direction={sortDirection}
        sorted-by={sortedBy}
        onsort={onHandleSort}
        onsave={handleSave}
        onrowaction={handleRowAction}>
</lightning-datatable>
  </template>
  
</lightning-card>
</template>



import { LightningElement,wire } from 'lwc';
import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import OPPORTUNITY_OBJECT from '@salesforce/schema/Opportunity';
import STAGENAME_FIELD from '@salesforce/schema/Opportunity.StageName';
import FILTER_CLASS from '@salesforce/apex/filter.getrecord';
import { NavigationMixin } from 'lightning/navigation';
import updateContacts from '@salesforce/apex/filter.updateOpp';
import { getRecordNotifyChange } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';
const columns =[{label: 'Name',fieldName:'Name'},{label: 'stage',fieldName:'StageName',editable :true},{label: 'Closedate',fieldName:'CloseDate'},{type: "button", typeAttributes: {  
    label: 'View',  
    name: 'View',  
    title: 'View',  
    disabled: false,  
    value: 'view',  
    iconPosition: 'left'  
}},  {type: "button", typeAttributes: {  
    label: 'Edit',  
    name: 'Edit',  
    title: 'Edit',  
    disabled: false,  
    value: 'edit',  
    iconPosition: 'left'  
}}];
export default class Filter extends NavigationMixin( LightningElement ) {
    columnHeader = ['Name', 'StageName', 'Status', 'CloseDate' ];
    draftValues = [];
    columns=columns;
    data;
    stageName ='';
    startdate='';
    enddate='';
    search='';
    @wire(getObjectInfo, { objectApiName: OPPORTUNITY_OBJECT })
    objectInfo;
    @wire(getPicklistValues, { recordTypeId: '$objectInfo.data.defaultRecordTypeId', fieldApiName: STAGENAME_FIELD})
    PicklistValues;
    @wire(FILTER_CLASS,{queryname : '$stageName',startdate :'$startdate',enddate :'$enddate', Search : '$search'})
    getrecord({data,error}){
        if(data){
            this.data=data;
        }
    }
    handleChange(event){
        if(event.target.label=='Stage Name'){
        this.stageName=event.target.value;}
        if(event.target.label=='start date'){
        this.startdate=event.target.value}
        if(event.target.label=='End date'){
        this.enddate=event.target.value}
        if(event.target.label=='Search'){
        this.search=event.target.value;
        }
    }
   

    handleClick(){
        this.stageName='';
        this.startdate='';
        this.enddate='';
        this.search='';
    }
    refreshComponent(event){
        eval("$A.get('e.force:refreshView').fire();");
     }
     handleRowAction(event) {  
          
        const recId =  event.detail.row.Id;  
        const actionName = event.detail.action.name;  
        if ( actionName === 'Edit' ) {  
    
            this[NavigationMixin.Navigate]({  
                type: 'standard__recordPage',  
                attributes: {  
                    recordId: recId,  
                    objectApiName: 'Opportunity',  
                    actionName: 'edit'  
                }  
            })  
    
        } else if ( actionName === 'View') {  
    
            this[NavigationMixin.Navigate]({  
                type: 'standard__recordPage',  
                attributes: {  
                    recordId: recId,  
                    objectApiName: 'Opportunity',  
                    actionName: 'view'  
                }  
            })  
    
        }
    
    
}
async handleSave(event) {
    const updatedFields = event.detail.draftValues;
    
    // Prepare the record IDs for getRecordNotifyChange()
    const notifyChangeIds = updatedFields.map(row => { return { "recordId": row.Id } });

    try {
        // Pass edited fields to the updateContacts Apex controller
        const result = await updateContacts({data: updatedFields});
        console.log(JSON.stringify("Apex update result: "+ result));
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: 'Contact updated',
                variant: 'success'
            })
        );

        // Refresh LDS cache and wires
        getRecordNotifyChange(notifyChangeIds);

        // Display fresh data in the datatable
        refreshApex(this.opportunity).then(() => {
            // Clear all draft values in the datatable
            this.draftValues = [];
        });
   } catch(error) {
           this.dispatchEvent(
               new ShowToastEvent({
                   title: 'Error updating or refreshing records',
                   message: error.body.message,
                   variant: 'error'
               })
         );
    };
}

exportContactData(){
// Prepare a html table
let doc = '<table>';
// Add styles for the table
doc += '<style>';
doc += 'table, th, td {';
doc += ' border: 1px solid black;';
doc += ' border-collapse: collapse;';
doc += ' text-align: left;';
doc += '}';
doc += '</style>';
// Add all the Table Headers
doc += '<tr>';
this.columnHeader.forEach(element => {
doc += '<th>'+ element +'</th>'
});
doc += '</tr>';
// Add the data rows
this.data.forEach(record => {
doc += '<tr>';
doc += '<th>'+record.Id+'</th>';
doc += '<th>'+record.Name+'</th>';
doc += '<th>'+record.StageName+'</th>';
doc += '<th>'+record.Status__c+'</th>';
doc += '<th>'+record.CloseDate+'</th>';
doc += '</tr>';
});
doc += '</table>';
var element = 'data:application/vnd.ms-excel,' + encodeURIComponent(doc);
let downloadElement = document.createElement('a');
downloadElement.href = element;
downloadElement.target = '_self';
// use .csv as extension on below line if you want to export data as csv
downloadElement.download = 'Opportunity Data.xls';
document.body.appendChild(downloadElement);
downloadElement.click();
}



}

import { LightningElement,wire } from 'lwc';
import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import OPPORTUNITY_OBJECT from '@salesforce/schema/Opportunity';
import STAGENAME_FIELD from '@salesforce/schema/Opportunity.StageName';
import FILTER_CLASS from '@salesforce/apex/filter.getrecord';
import { NavigationMixin } from 'lightning/navigation';
import updateContacts from '@salesforce/apex/filter.updateOpp';
import { getRecordNotifyChange } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';
const columns =[{label: 'Name',fieldName:'Name'},{label: 'stage',fieldName:'StageName',editable :true},{label: 'Closedate',fieldName:'CloseDate'},{type: "button", typeAttributes: {  
    label: 'View',  
    name: 'View',  
    title: 'View',  
    disabled: false,  
    value: 'view',  
    iconPosition: 'left'  
}},  {type: "button", typeAttributes: {  
    label: 'Edit',  
    name: 'Edit',  
    title: 'Edit',  
    disabled: false,  
    value: 'edit',  
    iconPosition: 'left'  
}}];
export default class Filter extends NavigationMixin( LightningElement ) {
    columnHeader = ['Name', 'StageName', 'Status', 'CloseDate' ];
    draftValues = [];
    columns=columns;
    data;
    stageName ='';
    startdate='';
    enddate='';
    search='';
    @wire(getObjectInfo, { objectApiName: OPPORTUNITY_OBJECT })
    objectInfo;
    @wire(getPicklistValues, { recordTypeId: '$objectInfo.data.defaultRecordTypeId', fieldApiName: STAGENAME_FIELD})
    PicklistValues;
    @wire(FILTER_CLASS,{queryname : '$stageName',startdate :'$startdate',enddate :'$enddate', Search : '$search'})
    getrecord({data,error}){
        if(data){
            this.data=data;
        }
    }
    handleChange(event){
        if(event.target.label=='Stage Name'){
        this.stageName=event.target.value;}
        if(event.target.label=='start date'){
        this.startdate=event.target.value}
        if(event.target.label=='End date'){
        this.enddate=event.target.value}
        if(event.target.label=='Search'){
        this.search=event.target.value;
        }
    }
   

    handleClick(){
        this.stageName='';
        this.startdate='';
        this.enddate='';
        this.search='';
    }
    refreshComponent(event){
        eval("$A.get('e.force:refreshView').fire();");
     }
     handleRowAction(event) {  
          
        const recId =  event.detail.row.Id;  
        const actionName = event.detail.action.name;  
        if ( actionName === 'Edit' ) {  
    
            this[NavigationMixin.Navigate]({  
                type: 'standard__recordPage',  
                attributes: {  
                    recordId: recId,  
                    objectApiName: 'Opportunity',  
                    actionName: 'edit'  
                }  
            })  
    
        } else if ( actionName === 'View') {  
    
            this[NavigationMixin.Navigate]({  
                type: 'standard__recordPage',  
                attributes: {  
                    recordId: recId,  
                    objectApiName: 'Opportunity',  
                    actionName: 'view'  
                }  
            })  
    
        }
    
    
}
async handleSave(event) {
    const updatedFields = event.detail.draftValues;
    
    // Prepare the record IDs for getRecordNotifyChange()
    const notifyChangeIds = updatedFields.map(row => { return { "recordId": row.Id } });

    try {
        // Pass edited fields to the updateContacts Apex controller
        const result = await updateContacts({data: updatedFields});
        console.log(JSON.stringify("Apex update result: "+ result));
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: 'Contact updated',
                variant: 'success'
            })
        );

        // Refresh LDS cache and wires
        getRecordNotifyChange(notifyChangeIds);

        // Display fresh data in the datatable
        refreshApex(this.opportunity).then(() => {
            // Clear all draft values in the datatable
            this.draftValues = [];
        });
   } catch(error) {
           this.dispatchEvent(
               new ShowToastEvent({
                   title: 'Error updating or refreshing records',
                   message: error.body.message,
                   variant: 'error'
               })
         );
    };
}

exportContactData(){
// Prepare a html table
let doc = '<table>';
// Add styles for the table
doc += '<style>';
doc += 'table, th, td {';
doc += ' border: 1px solid black;';
doc += ' border-collapse: collapse;';
doc += ' text-align: left;';
doc += '}';
doc += '</style>';
// Add all the Table Headers
doc += '<tr>';
this.columnHeader.forEach(element => {
doc += '<th>'+ element +'</th>'
});
doc += '</tr>';
// Add the data rows
this.data.forEach(record => {
doc += '<tr>';
doc += '<th>'+record.Id+'</th>';
doc += '<th>'+record.Name+'</th>';
doc += '<th>'+record.StageName+'</th>';
doc += '<th>'+record.Status__c+'</th>';
doc += '<th>'+record.CloseDate+'</th>';
doc += '</tr>';
});
doc += '</table>';
var element = 'data:application/vnd.ms-excel,' + encodeURIComponent(doc);
let downloadElement = document.createElement('a');
downloadElement.href = element;
downloadElement.target = '_self';
// use .csv as extension on below line if you want to export data as csv
downloadElement.download = 'Opportunity Data.xls';
document.body.appendChild(downloadElement);
downloadElement.click();
}



}


public with sharing class filter {
    @AuraEnabled
public static string updateOpp(Object data) {
    List<Opportunity> contactsForUpdate = (List<Opportunity>) JSON.deserialize(
         JSON.serialize(data),
         List<Opportunity>.class
    );
    try {
        update contactsForUpdate;
        return 'Success: contacts updated successfully';
    }
    catch (Exception e) {
        return 'The following exception has occurred: ' + e.getMessage();
    }
}
    @AuraEnabled(cacheable=true)
    public static list<Opportunity> getrecord(string queryname, string startdate, string enddate , string Search){
        date st,en;
        string j;
        string soql ='select Name,StageName,CloseDate from opportunity';
        if(String.isNotBlank(queryname) || String.isNotBlank(enddate) || String.isNotBlank(startdate) || String.isNotBlank(Search)){
            soql +=' where';
            if(String.isNotBlank(queryname)){
                soql +=' and StageName = : queryname';
            }
            if(String.isNotBlank(enddate) && String.isNotBlank(startdate)){
                st =Date.valueOf(startdate);
                en =Date.valueOf(enddate);
               soql +=' and CloseDate > : st and CloseDate < : en';
           } if(String.isNotBlank(Search)){
             j= '%'+Search+'%';
               soql += ' and Name like :j';
           }
        }
        soql=soql.replace('where and','Where');
        System.debug(soql);
        return database.query(soql);
    }
}









